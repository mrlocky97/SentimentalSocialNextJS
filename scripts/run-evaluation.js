/**
 * Script Principal de Evaluaci√≥n - Versi√≥n Simple
 * Punto de entrada para ejecutar diferentes evaluaciones
 */

const { execSync } = require('child_process');
const path = require('path');

function showMenu() {
  console.log('üéØ SISTEMA DE EVALUACI√ìN DE SENTIMENT ANALYSIS');
  console.log('='.repeat(60));
  console.log('');
  console.log('üìã Opciones disponibles:');
  console.log('   1. Validaci√≥n Cruzada Simple (3-Fold)');
  console.log('      - Evaluaci√≥n r√°pida con dataset peque√±o');
  console.log('      - Tiempo estimado: 1-2 minutos');
  console.log('      - Incluye an√°lisis de errores');
  console.log('');
  console.log('   2. Test de Slang Moderno');
  console.log('      - Prueba espec√≠fica de expresiones modernas');
  console.log('      - Tiempo estimado: 30 segundos');
  console.log('');
  console.log('   3. Validaci√≥n Cruzada Completa (TypeScript)');
  console.log('      - Evaluaci√≥n exhaustiva con dataset completo');
  console.log('      - Tiempo estimado: 5-10 minutos');
  console.log('');
  console.log('üöÄ Iniciando evaluaci√≥n por defecto: Validaci√≥n Cruzada Simple');
}

function runSimpleValidation() {
  console.log('\n‚ñ∂Ô∏è  Ejecutando Validaci√≥n Cruzada Simple...');
  try {
    execSync('node scripts/simple-cross-validation.js', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
  } catch (error) {
    console.error('‚ùå Error ejecutando validaci√≥n simple:', error.message);
    throw error;
  }
}

function runSlangTest() {
  console.log('\n‚ñ∂Ô∏è  Ejecutando Test de Slang Moderno...');
  try {
    execSync('node scripts/test-enhanced-system.js', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
  } catch (error) {
    console.error('‚ùå Error ejecutando test de slang:', error.message);
    throw error;
  }
}

function runCompleteValidation() {
  console.log('\n‚ñ∂Ô∏è  Ejecutando Validaci√≥n Cruzada Completa...');
  try {
    // Primero compilar
    console.log('üî® Compilando TypeScript...');
    execSync('npx tsc --build tsconfig.server.json', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log('‚ñ∂Ô∏è  Ejecutando evaluaci√≥n TypeScript...');
    execSync('npx ts-node --esm scripts/quick-cross-validation.ts', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
  } catch (error) {
    console.error('‚ùå Error ejecutando validaci√≥n completa:', error.message);
    console.log('üí° Intentando alternativa...');
    
    try {
      // Alternativa: usar solo la validaci√≥n simple
      runSimpleValidation();
    } catch (altError) {
      console.error('‚ùå Error en alternativa:', altError.message);
      throw error;
    }
  }
}

function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  try {
    showMenu();
    
    switch (command) {
      case '1':
      case 'simple':
        runSimpleValidation();
        break;
        
      case '2':
      case 'slang':
        runSlangTest();
        break;
        
      case '3':
      case 'complete':
        runCompleteValidation();
        break;
        
      case 'all':
        console.log('\nüîÑ Ejecutando todas las evaluaciones...');
        runSimpleValidation();
        console.log('\n' + '='.repeat(60));
        runSlangTest();
        break;
        
      case 'help':
      case '--help':
      case '-h':
        showHelp();
        break;
        
      default:
        // Por defecto ejecutar validaci√≥n simple
        runSimpleValidation();
        break;
    }
    
    console.log('\n‚úÖ Evaluaci√≥n completada exitosamente!');
    
  } catch (error) {
    console.error('\nüí• Error en el sistema de evaluaci√≥n:', error);
    console.log('\nüí° Comandos disponibles:');
    console.log('   node scripts/run-evaluation.js simple    # Validaci√≥n simple');
    console.log('   node scripts/run-evaluation.js slang     # Test de slang');
    console.log('   node scripts/run-evaluation.js complete  # Evaluaci√≥n completa');
    console.log('   node scripts/run-evaluation.js all       # Todas las evaluaciones');
    console.log('   node scripts/run-evaluation.js help      # Esta ayuda');
    process.exit(1);
  }
}

function showHelp() {
  console.log('\nüÜò AYUDA - SISTEMA DE EVALUACI√ìN');
  console.log('='.repeat(60));
  console.log('');
  console.log('üìñ USO:');
  console.log('   node scripts/run-evaluation.js [comando]');
  console.log('');
  console.log('üìã COMANDOS:');
  console.log('   simple     Validaci√≥n cruzada simple (por defecto)');
  console.log('   slang      Test espec√≠fico de slang moderno');
  console.log('   complete   Evaluaci√≥n completa con TypeScript');
  console.log('   all        Ejecutar simple + slang');
  console.log('   help       Mostrar esta ayuda');
  console.log('');
  console.log('üìä METODOLOG√çAS:');
  console.log('   ‚Ä¢ K-Fold Cross Validation (3-fold y 5-fold)');
  console.log('   ‚Ä¢ Stratified Sampling');
  console.log('   ‚Ä¢ An√°lisis de errores por clase');
  console.log('   ‚Ä¢ Intervalos de confianza');
  console.log('   ‚Ä¢ Test espec√≠ficos de slang moderno');
  console.log('');
  console.log('üìà M√âTRICAS:');
  console.log('   ‚Ä¢ Accuracy con desviaci√≥n est√°ndar');
  console.log('   ‚Ä¢ Precisi√≥n por clase');
  console.log('   ‚Ä¢ An√°lisis de confianza');
  console.log('   ‚Ä¢ Tiempo de procesamiento');
  console.log('   ‚Ä¢ Distribuci√≥n de errores');
  console.log('');
  console.log('üéØ RECOMENDACIONES:');
  console.log('   ‚Ä¢ Desarrollo: use "simple" para pruebas r√°pidas');
  console.log('   ‚Ä¢ Validaci√≥n: use "slang" para verificar mejoras');
  console.log('   ‚Ä¢ Producci√≥n: use "complete" para evaluaci√≥n final');
}

// Ejecutar funci√≥n principal
main();