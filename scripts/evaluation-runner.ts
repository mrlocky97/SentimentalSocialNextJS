/**
 * Script Principal de Evaluaci√≥n Integral
 * 
 * Punto de entrada √∫nico para ejecutar diferentes metodolog√≠as de evaluaci√≥n:
 * - Validaci√≥n cruzada r√°pida
 * - Comparaci√≥n de configuraciones
 * - Suite completa de evaluaci√≥n
 * - Evaluaci√≥n personalizada
 */

import { runEvaluationSuite } from './evaluation-methodologies';
import { runConfigurationComparison } from './model-configuration-comparison';
import { runQuickEvaluation } from './quick-cross-validation';

interface EvaluationOption {
  id: string;
  name: string;
  description: string;
  estimatedTime: string;
  action: () => Promise<void>;
}

class EvaluationRunner {
  
  private static options: EvaluationOption[] = [
    {
      id: 'quick',
      name: 'Validaci√≥n Cruzada R√°pida',
      description: 'K-fold cross validation con muestra peque√±a para pruebas r√°pidas',
      estimatedTime: '2-3 minutos',
      action: runQuickEvaluation
    },
    {
      id: 'config',
      name: 'Comparaci√≥n de Configuraciones',
      description: 'Compara diferentes configuraciones del modelo enhanced',
      estimatedTime: '3-5 minutos',
      action: async () => { await runConfigurationComparison(); }
    },
    {
      id: 'full',
      name: 'Suite Completa de Evaluaci√≥n',
      description: 'Evaluaci√≥n exhaustiva con m√∫ltiples metodolog√≠as',
      estimatedTime: '10-15 minutos',
      action: runEvaluationSuite
    },
    {
      id: 'custom',
      name: 'Evaluaci√≥n Personalizada',
      description: 'Configuraci√≥n personalizada de par√°metros de evaluaci√≥n',
      estimatedTime: 'Variable',
      action: () => EvaluationRunner.runCustomEvaluation()
    },
    {
      id: 'all',
      name: 'Ejecutar Todo',
      description: 'Ejecuta todas las evaluaciones en secuencia',
      estimatedTime: '15-25 minutos',
      action: () => EvaluationRunner.runAllEvaluations()
    }
  ];
  
  /**
   * Muestra el men√∫ principal y ejecuta la opci√≥n seleccionada
   */
  static async runInteractiveMenu(): Promise<void> {
    console.log('üéØ SISTEMA DE EVALUACI√ìN DE SENTIMENT ANALYSIS');
    console.log('='.repeat(80));
    console.log('');
    
    console.log('üìã Opciones disponibles:');
    this.options.forEach((option, index) => {
      console.log(`   ${index + 1}. ${option.name}`);
      console.log(`      ${option.description}`);
      console.log(`      ‚è±Ô∏è  Tiempo estimado: ${option.estimatedTime}`);
      console.log('');
    });
    
    // Por defecto ejecutar validaci√≥n cruzada r√°pida
    const defaultOptionIndex = 0;
    const selectedOption = this.options[defaultOptionIndex];
    
    console.log(`üöÄ Ejecutando: ${selectedOption.name}`);
    console.log(`‚è±Ô∏è  Tiempo estimado: ${selectedOption.estimatedTime}`);
    console.log('='.repeat(80));
    
    try {
      await selectedOption.action();
      console.log(`\n‚úÖ ${selectedOption.name} completada exitosamente!`);
    } catch (error) {
      console.error(`\n‚ùå Error en ${selectedOption.name}:`, error);
      throw error;
    }
  }
  
  /**
   * Ejecuta evaluaci√≥n personalizada
   */
  private static async runCustomEvaluation(): Promise<void> {
    console.log('üîß EVALUACI√ìN PERSONALIZADA');
    console.log('='.repeat(60));
    
    // Configuraci√≥n personalizada por defecto
    const customConfig = {
      kFolds: 5,
      sampleSize: 500,
      includeBootstrap: false,
      includeHoldOut: true,
      compareConfigurations: true
    };
    
    console.log('‚öôÔ∏è  Configuraci√≥n personalizada:');
    console.log(`   K-Folds: ${customConfig.kFolds}`);
    console.log(`   Tama√±o de muestra: ${customConfig.sampleSize}`);
    console.log(`   Incluir Bootstrap: ${customConfig.includeBootstrap ? 'S√≠' : 'No'}`);
    console.log(`   Incluir Hold-out: ${customConfig.includeHoldOut ? 'S√≠' : 'No'}`);
    console.log(`   Comparar configuraciones: ${customConfig.compareConfigurations ? 'S√≠' : 'No'}`);
    
    console.log('\nüöÄ Iniciando evaluaci√≥n personalizada...');
    
    // Ejecutar seg√∫n configuraci√≥n
    if (customConfig.compareConfigurations) {
      console.log('\n1Ô∏è‚É£ Comparando configuraciones...');
      await runConfigurationComparison();
    }
    
    console.log('\n2Ô∏è‚É£ Validaci√≥n cruzada...');
    await runQuickEvaluation();
    
    if (customConfig.includeHoldOut) {
      console.log('\n3Ô∏è‚É£ Hold-out validation adicional...');
      // Aqu√≠ podr√≠as llamar a una funci√≥n espec√≠fica de hold-out
      console.log('   (Incluido en suite completa)');
    }
    
    console.log('\n‚úÖ Evaluaci√≥n personalizada completada!');
  }
  
  /**
   * Ejecuta todas las evaluaciones en secuencia
   */
  private static async runAllEvaluations(): Promise<void> {
    console.log('üéØ EJECUTANDO TODAS LAS EVALUACIONES');
    console.log('='.repeat(80));
    
    const evaluations = [
      { name: 'Validaci√≥n Cruzada R√°pida', action: runQuickEvaluation },
      { name: 'Comparaci√≥n de Configuraciones', action: runConfigurationComparison },
      { name: 'Suite Completa', action: runEvaluationSuite }
    ];
    
    for (let i = 0; i < evaluations.length; i++) {
      const eval_ = evaluations[i];
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üìä ${i + 1}/${evaluations.length}: ${eval_.name}`);
      console.log(`${'='.repeat(60)}`);
      
      try {
        await eval_.action();
        console.log(`‚úÖ ${eval_.name} completada!`);
      } catch (error) {
        console.error(`‚ùå Error en ${eval_.name}:`, error);
        console.log('üîÑ Continuando con siguiente evaluaci√≥n...');
      }
      
      // Pausa entre evaluaciones
      if (i < evaluations.length - 1) {
        console.log('\n‚è≥ Pausa de 2 segundos...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    console.log('\nüéâ TODAS LAS EVALUACIONES COMPLETADAS!');
  }
  
  /**
   * Ejecuta evaluaci√≥n espec√≠fica por ID
   */
  static async runSpecificEvaluation(optionId: string): Promise<void> {
    const option = this.options.find(opt => opt.id === optionId);
    
    if (!option) {
      throw new Error(`Opci√≥n de evaluaci√≥n no encontrada: ${optionId}`);
    }
    
    console.log(`üöÄ Ejecutando: ${option.name}`);
    console.log(`‚è±Ô∏è  Tiempo estimado: ${option.estimatedTime}`);
    console.log('='.repeat(80));
    
    await option.action();
  }
  
  /**
   * Muestra informaci√≥n de ayuda
   */
  static showHelp(): void {
    console.log('üÜò AYUDA - SISTEMA DE EVALUACI√ìN');
    console.log('='.repeat(60));
    console.log('');
    console.log('üìñ USO:');
    console.log('   npm run evaluate              # Men√∫ interactivo');
    console.log('   npm run evaluate quick        # Validaci√≥n cruzada r√°pida');
    console.log('   npm run evaluate config       # Comparaci√≥n de configuraciones');
    console.log('   npm run evaluate full         # Suite completa');
    console.log('   npm run evaluate custom       # Evaluaci√≥n personalizada');
    console.log('   npm run evaluate all          # Todas las evaluaciones');
    console.log('');
    console.log('üìä METODOLOG√çAS INCLUIDAS:');
    console.log('   ‚Ä¢ K-Fold Cross Validation');
    console.log('   ‚Ä¢ Stratified Sampling');
    console.log('   ‚Ä¢ Hold-out Validation');
    console.log('   ‚Ä¢ Bootstrap Sampling');
    console.log('   ‚Ä¢ Comparaci√≥n de modelos');
    console.log('   ‚Ä¢ An√°lisis de errores');
    console.log('   ‚Ä¢ Intervalos de confianza');
    console.log('');
    console.log('üìà M√âTRICAS CALCULADAS:');
    console.log('   ‚Ä¢ Accuracy');
    console.log('   ‚Ä¢ Precision (macro-promedio)');
    console.log('   ‚Ä¢ Recall (macro-promedio)');
    console.log('   ‚Ä¢ F1-Score (macro-promedio)');
    console.log('   ‚Ä¢ Matriz de confusi√≥n');
    console.log('   ‚Ä¢ Tiempo de procesamiento');
    console.log('   ‚Ä¢ Confianza promedio');
    console.log('');
    console.log('üéØ CONFIGURACIONES PROBADAS:');
    console.log('   ‚Ä¢ Enhanced Engine (con preprocesamiento avanzado)');
    console.log('   ‚Ä¢ Base Engine (sin enhancements)');
    console.log('   ‚Ä¢ Unified Orchestrator (sistema unificado)');
  }
  
  /**
   * Genera reporte de resumen de todas las evaluaciones
   */
  static async generateSummaryReport(): Promise<void> {
    console.log('üìã GENERANDO REPORTE DE RESUMEN...');
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportName = `evaluation-summary-${timestamp}.txt`;
    
    console.log(`üìÑ Reporte guardado como: ${reportName}`);
    console.log('');
    console.log('üìä RESUMEN EJECUTIVO:');
    console.log('   El sistema de evaluaci√≥n incluye m√∫ltiples metodolog√≠as');
    console.log('   para validar el rendimiento del an√°lisis de sentiment.');
    console.log('   Recomendamos usar "quick" para desarrollo y "full" para');
    console.log('   evaluaci√≥n final antes de producci√≥n.');
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  try {
    switch (command) {
      case 'help':
      case '--help':
      case '-h':
        EvaluationRunner.showHelp();
        break;
        
      case 'quick':
        await EvaluationRunner.runSpecificEvaluation('quick');
        break;
        
      case 'config':
        await EvaluationRunner.runSpecificEvaluation('config');
        break;
        
      case 'full':
        await EvaluationRunner.runSpecificEvaluation('full');
        break;
        
      case 'custom':
        await EvaluationRunner.runSpecificEvaluation('custom');
        break;
        
      case 'all':
        await EvaluationRunner.runSpecificEvaluation('all');
        break;
        
      case 'summary':
        await EvaluationRunner.generateSummaryReport();
        break;
        
      default:
        await EvaluationRunner.runInteractiveMenu();
        break;
    }
    
  } catch (error) {
    console.error('üí• Error en el sistema de evaluaci√≥n:', error);
    console.log('\nüí° Usa "npm run evaluate help" para ver las opciones disponibles');
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main()
    .then(() => {
      console.log('\nüéâ Evaluaci√≥n completada exitosamente!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Error fatal:', error);
      process.exit(1);
    });
}

export { EvaluationRunner };
