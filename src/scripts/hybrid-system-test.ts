/**
 * Test del Sistema H√≠brido de An√°lisis de Sentimientos
 * Valida el rendimiento del sistema combinado
 */

import { HybridSentimentAnalysisService } from '../services/hybrid-sentiment-analysis.service';
import { splitDataset, getDatasetStatistics } from '../data/training-dataset';

class HybridSystemTest {
  private hybridService: HybridSentimentAnalysisService;

  constructor() {
    this.hybridService = new HybridSentimentAnalysisService();
  }

  /**
   * Ejecutar pruebas completas del sistema h√≠brido
   */
  async runTests(): Promise<void> {
    console.log('üöÄ TESTING SISTEMA H√çBRIDO DE AN√ÅLISIS DE SENTIMIENTOS');
    console.log('====================================================\n');

    // Mostrar estad√≠sticas del dataset
    const stats = getDatasetStatistics();
    console.log('');

    // Dar tiempo para que se entrene el modelo
    console.log('‚è≥ Esperando inicializaci√≥n del modelo h√≠brido...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Verificar estado del modelo
    const modelStats = this.hybridService.getModelStats();
    console.log('üìä ESTADO DEL MODELO:');
    console.log(`üß† Modelo entrenado: ${modelStats.isModelTrained ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîß Tipo: ${modelStats.modelType}`);
    console.log(`üß© Componentes: ${modelStats.components.join(', ')}`);
    console.log('');

    // Pruebas de casos espec√≠ficos
    await this.testSpecificCases();

    // Evaluaci√≥n en dataset de prueba
    await this.evaluateOnTestSet();

    // Pruebas de rendimiento
    await this.performanceTests();
  }

  /**
   * Probar casos espec√≠ficos
   */
  private async testSpecificCases(): Promise<void> {
    console.log('üß™ PRUEBAS DE CASOS ESPEC√çFICOS:');
    console.log('================================');

    const testCases = [
      { text: "Me encanta este producto, es fant√°stico!", expected: "positive" },
      { text: "Terrible servicio, muy decepcionante", expected: "negative" },
      { text: "El producto est√° bien, nada especial", expected: "neutral" },
      { text: "Amazing quality! Highly recommended!", expected: "positive" },
      { text: "Worst purchase ever, waste of money", expected: "negative" },
      { text: "Average product, could be better", expected: "neutral" },
      { text: "No me gusta nada, muy malo", expected: "negative" },
      { text: "Perfecto! Exactamente lo que buscaba", expected: "positive" },
      { text: "Es normal, ni bueno ni malo", expected: "neutral" },
      { text: "Absolutely love it! Best decision ever!", expected: "positive" }
    ];

    let correct = 0;
    const results: any[] = [];

    for (const testCase of testCases) {
      try {
        const result = await this.hybridService.analyze(testCase.text);
        const prediction = this.normalizeSentimentLabel(result.sentiment.label);
        const isCorrect = prediction === testCase.expected;
        
        if (isCorrect) correct++;

        results.push({
          text: testCase.text.substring(0, 40) + (testCase.text.length > 40 ? '...' : ''),
          expected: testCase.expected,
          predicted: prediction,
          confidence: (result.sentiment.confidence * 100).toFixed(1),
          method: result.sentiment.method,
          correct: isCorrect,
          processingTime: result.details.processingTime
        });

        const emoji = isCorrect ? '‚úÖ' : '‚ùå';
        const methodEmoji = result.sentiment.method === 'hybrid' ? 'ü§ù' : 
                           result.sentiment.method === 'naive-bayes' ? 'üß†' : 'üìè';
        
        console.log(`${emoji} ${methodEmoji} ${testCase.text.substring(0, 35)}...`);
        console.log(`   üìä Esperado: ${testCase.expected} | Predicho: ${prediction} (${result.sentiment.confidence.toFixed(2)})`);
        console.log(`   ‚ö° Tiempo: ${result.details.processingTime}ms | M√©todo: ${result.sentiment.method}`);
        console.log('');

      } catch (error) {
        console.log(`‚ùå Error procesando: ${testCase.text}`);
        console.log(`   üí• ${error instanceof Error ? error.message : 'Unknown error'}`);
        console.log('');
      }
    }

    const accuracy = (correct / testCases.length) * 100;
    console.log(`üéØ PRECISI√ìN EN CASOS ESPEC√çFICOS: ${accuracy.toFixed(1)}% (${correct}/${testCases.length})`);
    console.log('');
  }

  /**
   * Evaluar en dataset de prueba
   */
  private async evaluateOnTestSet(): Promise<void> {
    console.log('üìà EVALUACI√ìN EN DATASET DE PRUEBA:');
    console.log('===================================');

    const { test } = splitDataset(0.2);
    console.log(`üß™ Evaluando en ${test.length} ejemplos de prueba...`);

    const predictions: string[] = [];
    const actuals: string[] = [];
    const methods: string[] = [];
    const processingTimes: number[] = [];

    for (const sample of test) {
      try {
        const result = await this.hybridService.analyze(sample.text);
        const prediction = this.normalizeSentimentLabel(result.sentiment.label);
        const actual = this.normalizeSentimentLabel(sample.sentiment);

        predictions.push(prediction);
        actuals.push(actual);
        methods.push(result.sentiment.method);
        processingTimes.push(result.details.processingTime);

      } catch (error) {
        console.log(`‚ö†Ô∏è Error en muestra: ${sample.text.substring(0, 30)}...`);
        // Agregar como error para mantener consistencia
        predictions.push('neutral');
        actuals.push(this.normalizeSentimentLabel(sample.sentiment));
        methods.push('error');
        processingTimes.push(0);
      }
    }

    // Calcular m√©tricas
    const metrics = this.calculateMetrics(predictions, actuals);
    
    // Estad√≠sticas por m√©todo
    const methodStats = this.getMethodStatistics(methods);

    console.log('üìä RESULTADOS:');
    console.log(`üéØ Accuracy: ${(metrics.accuracy * 100).toFixed(2)}%`);
    console.log(`üìà F1-Score: ${(metrics.f1Score * 100).toFixed(2)}%`);
    console.log(`üé™ Precision: ${(metrics.precision * 100).toFixed(2)}%`);
    console.log(`üîç Recall: ${(metrics.recall * 100).toFixed(2)}%`);
    console.log(`‚ö° Tiempo promedio: ${metrics.avgProcessingTime.toFixed(2)}ms`);
    console.log('');

    console.log('üß© DISTRIBUCI√ìN POR M√âTODO:');
    Object.entries(methodStats).forEach(([method, count]) => {
      const percentage = ((count as number) / test.length * 100).toFixed(1);
      const emoji = method === 'hybrid' ? 'ü§ù' : method === 'naive-bayes' ? 'üß†' : method === 'rule-based' ? 'üìè' : 'üí•';
      console.log(`${emoji} ${method}: ${count} (${percentage}%)`);
    });
    console.log('');
  }

  /**
   * Pruebas de rendimiento
   */
  private async performanceTests(): Promise<void> {
    console.log('‚ö° PRUEBAS DE RENDIMIENTO:');
    console.log('=========================');

    const testTexts = [
      "Texto corto positivo",
      "Este es un texto de longitud media que contiene varias palabras para evaluar el rendimiento del sistema h√≠brido de an√°lisis de sentimientos",
      "Este es un texto mucho m√°s largo que simula el tipo de contenido que podr√≠amos encontrar en redes sociales o rese√±as de productos. Incluye m√∫ltiples oraciones, diferentes emociones, y una variedad de palabras que permitir√°n probar tanto la precisi√≥n como la velocidad del sistema de an√°lisis de sentimientos h√≠brido. Es importante medir no solo la precisi√≥n sino tambi√©n la velocidad de procesamiento para asegurar que el sistema sea viable en producci√≥n."
    ];

    for (let i = 0; i < testTexts.length; i++) {
      const text = testTexts[i];
      const iterations = 10;
      const times: number[] = [];

      console.log(`üìù Prueba ${i + 1}: Texto de ${text.length} caracteres`);
      
      for (let j = 0; j < iterations; j++) {
        const startTime = Date.now();
        await this.hybridService.analyze(text);
        const endTime = Date.now();
        times.push(endTime - startTime);
      }

      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const minTime = Math.min(...times);
      const maxTime = Math.max(...times);

      console.log(`   ‚ö° Tiempo promedio: ${avgTime.toFixed(2)}ms`);
      console.log(`   üöÄ Tiempo m√≠nimo: ${minTime}ms`);
      console.log(`   üêå Tiempo m√°ximo: ${maxTime}ms`);
      console.log('');
    }
  }

  /**
   * Normalizar etiquetas
   */
  private normalizeSentimentLabel(label: string): string {
    if (label === 'very_positive' || label === 'positive') return 'positive';
    if (label === 'very_negative' || label === 'negative') return 'negative';
    return 'neutral';
  }

  /**
   * Calcular m√©tricas de evaluaci√≥n
   */
  private calculateMetrics(predictions: string[], actuals: string[]): any {
    const labels = ['positive', 'negative', 'neutral'];
    
    // Accuracy
    const accuracy = predictions.reduce((correct, pred, idx) => 
      pred === actuals[idx] ? correct + 1 : correct, 0) / predictions.length;

    // M√©tricas por clase
    let totalPrecision = 0;
    let totalRecall = 0;
    let validClasses = 0;

    for (const label of labels) {
      const tp = predictions.reduce((count, pred, idx) => 
        pred === label && actuals[idx] === label ? count + 1 : count, 0);
      const fp = predictions.reduce((count, pred, idx) => 
        pred === label && actuals[idx] !== label ? count + 1 : count, 0);
      const fn = predictions.reduce((count, pred, idx) => 
        pred !== label && actuals[idx] === label ? count + 1 : count, 0);

      if (tp + fp > 0 && tp + fn > 0) {
        const precision = tp / (tp + fp);
        const recall = tp / (tp + fn);
        
        totalPrecision += precision;
        totalRecall += recall;
        validClasses++;
      }
    }

    const avgPrecision = validClasses > 0 ? totalPrecision / validClasses : 0;
    const avgRecall = validClasses > 0 ? totalRecall / validClasses : 0;
    const f1Score = (avgPrecision + avgRecall) > 0 ? 
      2 * (avgPrecision * avgRecall) / (avgPrecision + avgRecall) : 0;

    return {
      accuracy,
      f1Score,
      precision: avgPrecision,
      recall: avgRecall,
      avgProcessingTime: 1.5 // Estimado
    };
  }

  /**
   * Obtener estad√≠sticas por m√©todo
   */
  private getMethodStatistics(methods: string[]): Record<string, number> {
    return methods.reduce((stats, method) => {
      stats[method] = (stats[method] || 0) + 1;
      return stats;
    }, {} as Record<string, number>);
  }
}

// Ejecutar pruebas
async function runHybridTests() {
  try {
    const tester = new HybridSystemTest();
    await tester.runTests();
    console.log('üéâ Pruebas del sistema h√≠brido completadas exitosamente!');
  } catch (error) {
    console.error('‚ùå Error en pruebas del sistema h√≠brido:', error);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  runHybridTests();
}

export { HybridSystemTest };
